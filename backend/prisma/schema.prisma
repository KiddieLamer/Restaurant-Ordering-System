generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          String   @id @default(uuid())
  name        String
  address     String
  phone       String?
  email       String?
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tables     Table[]
  categories Category[]
  menuItems  MenuItem[]
  orders     Order[]
  users      User[]

  @@map("restaurants")
}

model Table {
  id           String @id @default(uuid())
  tableNumber  String
  qrCode       String @unique
  restaurantId String
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@unique([restaurantId, tableNumber])
  @@map("tables")
}

model Category {
  id           String @id @default(uuid())
  name         String
  description  String?
  restaurantId String
  sortOrder    Int    @default(0)
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItems  MenuItem[]

  @@map("categories")
}

model MenuItem {
  id           String  @id @default(uuid())
  name         String
  description  String?
  price        Decimal @db.Decimal(10, 2)
  image        String?
  isAvailable  Boolean @default(true)
  categoryId   String
  restaurantId String
  sortOrder    Int     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("menu_items")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  passwordHash String
  role         UserRole @default(STAFF)
  restaurantId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@map("users")
}

model Order {
  id           String      @id @default(uuid())
  orderNumber  String      @unique
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  paymentId    String?
  notes        String?
  tableId      String
  restaurantId String
  userId       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  table      Table       @relation(fields: [tableId], references: [id])
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(uuid())
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  notes      String?
  orderId    String
  menuItemId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

enum UserRole {
  OWNER
  MANAGER
  CASHIER
  KITCHEN
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  SERVED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}